# -*- coding: utf-8 -*-
"""szakdolgozat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nwh0SSYmGT-ozMfgua6uHH4J6X50Y0ve

# **Csatlakozás drivehoz**
"""

from google.colab import drive
drive.mount('/content/drive')

print("csatlakozott a driveomhoz")

"""# **Importálások, beolvasás, db létrehozása**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns #heatmap-hez

bereltossz = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/adatok/bereltjo2.csv", sep=";")
#print(bereltossz)
eladottossz = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/adatok/eladottjo2.csv", sep=";")
#print(eladottossz)


#berelt csv doksi DataFrameme alakitasa
df_bereltossz = pd.DataFrame(data = bereltossz, columns=['Település', 'Körzet', 'Év', 'Jogi_státusz', 'Nyaraló', 'Típus', 'Altípus','Panelprogram','Ingatlan_állapota', 'Építés_éve', 'Zárószint','Emelet','Tájolás','Kilátás','Lift', 'Lakáson_belüli_szintszám', 'Fűtés','Nettó_méret','Terasz_méret', 'Erkély_méret', 'Telek_méret', 'Telek_méret_mértékegysége', 'Szobaszám', 'Kiadási_ár', 'Négyzetméterár'])
df_bereltossz=df_bereltossz.fillna(0)


#eladott csv doksi DataFrameme alakitasa
df_eladottossz = pd.DataFrame(data = eladottossz, columns=['Település', 'Körzet', 'Év', 'Jogi_státusz', 'Nyaraló', 'Típus', 'Altípus','Panelprogram','Ingatlan_állapota', 'Építés_éve', 'Zárószint','Emelet','Tájolás','Kilátás','Lift', 'Lakáson_belüli_szintszám', 'Fűtés','Nettó_méret','Terasz_méret', 'Erkély_méret', 'Telek_méret', 'Telek_méret_mértékegysége', 'Szobaszám', 'Eladási_ár', 'Négyzetméterár'])
df_eladottossz=df_eladottossz.fillna(value=0)

"""# **Korrelációk vizsgálata:**

# **Bérbeadottak / Eladottak közül miket akarok vizsgálni**
"""

df_bereltossz.dtypes

#Település;Év;Jogi_státusz;Nyaraló;Típus;Altípus;Panelprogram;Ingatlan_állapota;Építés_éve;Zárószint;Emelet;Tájolás;Kilátás;Lift;
#Lakáson_belüli_szintszám;Fűtés;Nettó_méret;Terasz_méret;Erkély_méret;Telek_méret;Telek_méret_mértékegysége;Szobaszám;Kiadási_ár;Négyzetméterár																									
#Ötletek miket mivel: 
"""
Település - Év
Település - Típus
Település - Altípus
Település - Építés éve
Település - Fűtés
Település - Kiadási/Eladási ár
Település - Négyzetméterár
Csak eladottnál van értelme szerintem{
  Jogi - Panelprogram
  Jogi - Ingatlan állapota
  Jogi - Négyzetméterár
}
Típus - Altípus
Típus - Panelprogram
Típus - Építés éve
Típus - Lift
Típus - Fűtés
Típus - Nettó méret
Típus - Kiadási/Eladási ár
Típus - Négyzetméterár
Altípus - Kiadási/Eladási ár
Altípus - Négyzetméterár
Ingatlan állapota - Építési év
Ingatlna állapota - Fűtés
Ingatlan állapota - Nettó méret
Ingatlan állapota - Kiadási/Eladási ár
Ingatlan állapota - Négyzetméterár
Építés éve - Lift
Építés éve - Fűtés
Építés éve - Nettó méret
Építés éve - Szobaszám
Építés éve - Kiadási/Eladási ár
Építés éve - Négyzetméterár
Emelet - Lift
emelet - négyzetméter ár
emelet - Kiadási/Eladási ár
Nettó_méret - Kiadási/Eladási ár
"""

#Ezeken kívűl lesznek majd még szűrések is, külön városokra, típusokra stb

"""# **Másolatok létrehozása, hogy ne az eredeti db-t módosítsam**"""

#másolat az eredeti db-ről sima label encodinghoz
#df_masolat_eladott = df_eladottossz.select_dtypes(include=['object']).copy()
df_masolat_eladott = df_eladottossz.copy()
df_masolat_berelt = df_bereltossz.copy()

#másolataz eredeti dbről a label top5höz
df_masolat_labeltop5_eladott = df_eladottossz.copy()
df_masolat_labeltop5_berelt = df_bereltossz.copy()

#másolataz eredeti dbről a one hot top5höz
df_masolat_onehottop5_eladott = df_eladottossz.copy()
df_masolat_onehottop5_berelt = df_bereltossz.copy()

"""# **Kategórikus változókat lekérdezem külön, hogy lássam milyen típusaik vannak, és miből mennyi**"""

#Település
df_masolat_eladott["Település"].value_counts()
df_masolat_berelt["Település"].value_counts()

#Jogi státusz
df_masolat_eladott["Jogi_státusz"].value_counts()
df_masolat_berelt["Jogi_státusz"].value_counts()

#Típus
df_masolat_eladott["Típus"].value_counts()
#df_masolat_berelt["Típus"].value_counts()

#Altípus
df_masolat_eladott["Altípus"].value_counts()
#df_masolat_berelt["Altípus"].value_counts()

#Emelet
df_masolat_eladott["Emelet"].value_counts()
#df_masolat_berelt["Emelet"].value_counts()

#Fűtés
df_masolat_eladott["Fűtés"].value_counts()
#df_masolat_berelt["Fűtés"].value_counts()

#Szobaszám
df_masolat_eladott["Szobaszám"].value_counts()
#df_masolat_berelt["Szobaszám"].value_counts()

"""# **Label encoding mindre**"""

#eladott
#objectből category típusra változtatom ami  kell
df_masolat_eladott["Település"] = df_masolat_eladott["Település"].astype('category')

df_masolat_eladott["Jogi_státusz"] = df_masolat_eladott["Jogi_státusz"].astype('category')

df_masolat_eladott["Típus"] = df_masolat_eladott["Típus"].astype('category')

df_masolat_eladott["Altípus"] = df_masolat_eladott["Altípus"].astype('category')

df_masolat_eladott["Emelet"] = df_masolat_eladott["Emelet"].astype('category')

df_masolat_eladott["Fűtés"] = df_masolat_eladott["Fűtés"].astype('category')

df_masolat_eladott["Szobaszám"] = df_masolat_eladott["Szobaszám"].astype('category')

df_masolat_eladott.dtypes

#berelt
#objectből category típusra változtatom ami  kell
df_masolat_berelt["Település"] = df_masolat_berelt["Település"].astype('category')

df_masolat_berelt["Jogi_státusz"] = df_masolat_berelt["Jogi_státusz"].astype('category')

df_masolat_berelt["Típus"] = df_masolat_berelt["Típus"].astype('category')

df_masolat_berelt["Altípus"] = df_masolat_berelt["Altípus"].astype('category')

df_masolat_berelt["Emelet"] = df_masolat_berelt["Emelet"].astype('category')

df_masolat_berelt["Fűtés"] = df_masolat_berelt["Fűtés"].astype('category')

df_masolat_berelt["Szobaszám"] = df_masolat_berelt["Szobaszám"].astype('category')

df_masolat_berelt.dtypes

#hozzáadom az db-hez az új oszlopokat
df_masolat_eladott["Település_kategória"] = df_masolat_eladott["Település"].cat.codes
df_masolat_eladott["Jogi_státusz_kategória"] = df_masolat_eladott["Jogi_státusz"].cat.codes
df_masolat_eladott["Típus_kategória"] = df_masolat_eladott["Típus"].cat.codes
df_masolat_eladott["Altípus_kategória"] = df_masolat_eladott["Altípus"].cat.codes
df_masolat_eladott["Emelet_kategória"] = df_masolat_eladott["Emelet"].cat.codes
df_masolat_eladott["Fűtés_kategória"] = df_masolat_eladott["Fűtés"].cat.codes
df_masolat_eladott["Szobaszám_kategória"] = df_masolat_eladott["Szobaszám"].cat.codes

df_masolat_eladott.head()

#hozzáadom az db-hez az új oszlopokat
df_masolat_berelt["Település_kategória"] = df_masolat_berelt["Település"].cat.codes
df_masolat_berelt["Jogi_státusz_kategória"] = df_masolat_berelt["Jogi_státusz"].cat.codes
df_masolat_berelt["Típus_kategória"] = df_masolat_berelt["Típus"].cat.codes
df_masolat_berelt["Altípus_kategória"] = df_masolat_berelt["Altípus"].cat.codes
df_masolat_berelt["Emelet_kategória"] = df_masolat_berelt["Emelet"].cat.codes
df_masolat_berelt["Fűtés_kategória"] = df_masolat_berelt["Fűtés"].cat.codes
df_masolat_berelt["Szobaszám_kategória"] = df_masolat_berelt["Szobaszám"].cat.codes

df_masolat_berelt.head()

"""# **Label encoding a top 5-re verzió**"""

#eladott
#objectből category típusra változtatom ami  kell
df_masolat_labeltop5_eladott["Település"] = df_masolat_labeltop5_eladott["Település"].astype('category')

df_masolat_labeltop5_eladott["Jogi_státusz"] = df_masolat_labeltop5_eladott["Jogi_státusz"].astype('category')

df_masolat_labeltop5_eladott["Típus"] = df_masolat_labeltop5_eladott["Típus"].astype('category')

df_masolat_labeltop5_eladott["Altípus"] = df_masolat_labeltop5_eladott["Altípus"].astype('category')

df_masolat_labeltop5_eladott["Emelet"] = df_masolat_labeltop5_eladott["Emelet"].astype('category')

df_masolat_labeltop5_eladott["Fűtés"] = df_masolat_labeltop5_eladott["Fűtés"].astype('category')

df_masolat_labeltop5_eladott["Szobaszám"] = df_masolat_labeltop5_eladott["Szobaszám"].astype('category')

df_masolat_labeltop5_eladott.dtypes

#berelt
#objectből category típusra változtatom ami  kell
df_masolat_labeltop5_berelt["Település"] = df_masolat_labeltop5_berelt["Település"].astype('category')

df_masolat_labeltop5_berelt["Jogi_státusz"] = df_masolat_labeltop5_berelt["Jogi_státusz"].astype('category')

df_masolat_labeltop5_berelt["Típus"] = df_masolat_labeltop5_berelt["Típus"].astype('category')

df_masolat_labeltop5_berelt["Altípus"] = df_masolat_labeltop5_berelt["Altípus"].astype('category')

df_masolat_labeltop5_berelt["Emelet"] = df_masolat_labeltop5_berelt["Emelet"].astype('category')

df_masolat_labeltop5_berelt["Fűtés"] = df_masolat_labeltop5_berelt["Fűtés"].astype('category')

df_masolat_labeltop5_berelt["Szobaszám"] = df_masolat_labeltop5_berelt["Szobaszám"].astype('category')

df_masolat_labeltop5_berelt.dtypes

#hozzáadom az db-hez az új oszlopokat
df_masolat_labeltop5_eladott["Település_kategória"] = df_masolat_labeltop5_eladott["Település"].cat.codes
df_masolat_labeltop5_eladott["Jogi_státusz_kategória"] = df_masolat_labeltop5_eladott["Jogi_státusz"].cat.codes
df_masolat_labeltop5_eladott["Típus_kategória"] = df_masolat_labeltop5_eladott["Típus"].cat.codes
df_masolat_labeltop5_eladott["Altípus_kategória"] = df_masolat_labeltop5_eladott["Altípus"].cat.codes
df_masolat_labeltop5_eladott["Emelet_kategória"] = df_masolat_labeltop5_eladott["Emelet"].cat.codes
df_masolat_labeltop5_eladott["Fűtés_kategória"] = df_masolat_labeltop5_eladott["Fűtés"].cat.codes
df_masolat_labeltop5_eladott["Szobaszám_kategória"] = df_masolat_labeltop5_eladott["Szobaszám"].cat.codes

df_masolat_labeltop5_eladott.head()

#hozzáadom az db-hez az új oszlopokat
df_masolat_labeltop5_berelt["Település_kategória"] = df_masolat_labeltop5_berelt["Település"].cat.codes
df_masolat_labeltop5_berelt["Jogi_státusz_kategória"] = df_masolat_labeltop5_berelt["Jogi_státusz"].cat.codes
df_masolat_labeltop5_berelt["Típus_kategória"] = df_masolat_labeltop5_berelt["Típus"].cat.codes
df_masolat_labeltop5_berelt["Altípus_kategória"] = df_masolat_labeltop5_berelt["Altípus"].cat.codes
df_masolat_labeltop5_berelt["Emelet_kategória"] = df_masolat_labeltop5_berelt["Emelet"].cat.codes
df_masolat_labeltop5_berelt["Fűtés_kategória"] = df_masolat_labeltop5_berelt["Fűtés"].cat.codes
df_masolat_labeltop5_berelt["Szobaszám_kategória"] = df_masolat_labeltop5_berelt["Szobaszám"].cat.codes

df_masolat_labeltop5_berelt.head()

"""# **One hot encoding top5**"""

#bereltre
#itt nem kell a category típússá alakítani, csak az oszlopokat felsorolni, ebben segít a get_dummies beépített fgv, a sima dummies-szal nem volt jó
categorical_columns = ['Település', 'Jogi_státusz', 'Típus', 'Altípus', 'Emelet', 'Fűtés', 'Szobaszám']
for column in categorical_columns:
    tempdf = pd.get_dummies(df_masolat_onehottop5_berelt[column], prefix=column)
    df_masolat_onehottop5_berelt = pd.merge(
        left=df_masolat_onehottop5_berelt,
        right=tempdf,
        left_index=True,
        right_index=True,
    )
    df_masolat_onehottop5_berelt = df_masolat_onehottop5_berelt.drop(columns=column)
print(df_masolat_onehottop5_berelt)

#eladottra
categorical_columns = ['Település', 'Jogi_státusz', 'Típus', 'Altípus', 'Emelet', 'Fűtés', 'Szobaszám']
for column in categorical_columns:
    tempdf = pd.get_dummies(df_masolat_onehottop5_eladott[column], prefix=column)
    df_masolat_onehottop5_eladott = pd.merge(
        left=df_masolat_onehottop5_eladott,
        right=tempdf,
        left_index=True,
        right_index=True,
    )
    df_masolat_onehottop5_eladott = df_masolat_onehottop5_eladott.drop(columns=column)
print(df_masolat_onehottop5_eladott)

"""# **Korreláció sima label encodinggal**

**Bérbeadott:**
"""

df_masolat_berelt.corr()
df_masolat_berelt

corrmat = df_masolat_berelt.corr()
  
f, ax = plt.subplots(figsize =(9, 8))
sns.heatmap(corrmat, ax = ax, cmap ="Paired", linewidths = 0.1)

"""**Eladott:**"""

df_masolat_eladott.corr()

corrmat = df_masolat_eladott.corr()
  
f, ax = plt.subplots(figsize =(9, 8))
sns.heatmap(corrmat, ax = ax, cmap ="Paired", linewidths = 0.1)

"""# **Korreláció top5-ös label encoding-gal**

A Jogi státusz, a Típus és az Altípust nem kell változtatni, alapból 5 vagy kevesebb fajtája van.

**Bérbeadott:**
"""

#először kigyűjtöttem a top5öket amikket szűrnöm kell, majd egy új adatbázisba lementettem
"""
település:
Kecskemét         41
Debrecen          35
Győr              17
Miskolc           15
Pécs              13
emelet:
2                 41
1                 35
3                 28
földszint         26
0                 23
fűtés:
gaz_cirko                  68
gaz_konvektor              40
tavegyedi                  40
tav                        25
hazkozponti                14
szobaszám:
2 + 0     89
1 + 0     33
3 + 0     27
1 + 1     18
2 + 1     10
"""
df_masolat_labeltop5_KESZ_berelt = df_masolat_labeltop5_berelt[((df_masolat_labeltop5_berelt.Település == "Kecskemét") | (df_masolat_labeltop5_berelt.Település == "Debrecen") | (df_masolat_labeltop5_berelt.Település == "Győr") | (df_masolat_labeltop5_berelt.Település == "Miskolc") | (df_masolat_labeltop5_berelt.Település == "Pécs")) & ((df_masolat_labeltop5_berelt.Emelet == "2") | (df_masolat_labeltop5_berelt.Emelet == "1") | (df_masolat_labeltop5_berelt.Emelet == "3") | (df_masolat_labeltop5_berelt.Emelet == "földszint") | (df_masolat_labeltop5_berelt.Emelet == "0")) & ((df_masolat_labeltop5_berelt.Fűtés == "gaz_cirko") | (df_masolat_labeltop5_berelt.Fűtés == "gaz_konvektor") | (df_masolat_labeltop5_berelt.Fűtés == "tavegyedi") | (df_masolat_labeltop5_berelt.Fűtés == "tav") | (df_masolat_labeltop5_berelt.Fűtés == "hazkozponti")) & ((df_masolat_labeltop5_berelt.Szobaszám == "2 + 0") | (df_masolat_labeltop5_berelt.Szobaszám == "1 + 0") | (df_masolat_labeltop5_berelt.Szobaszám == "3 + 0") | (df_masolat_labeltop5_berelt.Szobaszám == "1 + 1") | (df_masolat_labeltop5_berelt.Szobaszám == "2 + 1"))]
#& (df_masolat_labeltop5_berelt.Emelet_kategória > 5) & (df_masolat_labeltop5_berelt.Fűtés_kategória > 5) & (df_masolat_labeltop5_berelt.Szobaszám_kategória > 5)]
print(df_masolat_labeltop5_KESZ_berelt)

#df_masolat_labeltop5_KESZ_berelt=df_masolat_labeltop5_KESZ_berelt.fillna(value=0)
df_masolat_labeltop5_KESZ_berelt.info()

df_masolat_labeltop5_KESZ_berelt.corr()

corrmat = df_masolat_labeltop5_KESZ_berelt.corr()
  
f, ax = plt.subplots(figsize =(9, 8))
sns.heatmap(corrmat, ax = ax, cmap ="Paired", linewidths = 0.1)

"""**Eladott:**"""

#először kigyűjtöttem a top5öket amikket szűrnöm kell, majd egy új adatbázisba lementettem
"""
település:
Debrecen            91
Miskolc             59
Pécs                48
Nyíregyháza         40
Tatabánya           34
emelet:
0                 125
3                  80
2                  67
1                  62
4                  47
fűtés:
gaz_cirko                  138
tavegyedi                  100
gaz_konvektor               97
tav                         69
hazkozponti                 29
szobaszám:
2 + 0     168
3 + 0      71
1 + 0      54
2 + 1      47
1 + 1      45
"""
df_masolat_labeltop5_KESZ_eladott = df_masolat_labeltop5_eladott[((df_masolat_labeltop5_eladott.Település == "Debrecen") | (df_masolat_labeltop5_eladott.Település == "Miskolc") | (df_masolat_labeltop5_eladott.Település == "Pécs") | (df_masolat_labeltop5_eladott.Település == "Nyíregyháza") | (df_masolat_labeltop5_eladott.Település == "Tatabánya")) & ((df_masolat_labeltop5_eladott.Emelet == "0") | (df_masolat_labeltop5_eladott.Emelet == "3") | (df_masolat_labeltop5_eladott.Emelet == "2") | (df_masolat_labeltop5_eladott.Emelet == "1") | (df_masolat_labeltop5_eladott.Emelet == "4")) & ((df_masolat_labeltop5_eladott.Fűtés == "gaz_cirko") | (df_masolat_labeltop5_eladott.Fűtés == "tavegyedi") | (df_masolat_labeltop5_eladott.Fűtés == "gaz_konvektor") | (df_masolat_labeltop5_eladott.Fűtés == "tav") | (df_masolat_labeltop5_eladott.Fűtés == "hazkozponti")) & ((df_masolat_labeltop5_eladott.Szobaszám == "2 + 0") | (df_masolat_labeltop5_eladott.Szobaszám == "3 + 0") | (df_masolat_labeltop5_eladott.Szobaszám == "1 + 0") | (df_masolat_labeltop5_eladott.Szobaszám == "2 + 1") | (df_masolat_labeltop5_eladott.Szobaszám == "1 + 1"))]
#& (df_masolat_labeltop5_berelt.Emelet_kategória > 5) & (df_masolat_labeltop5_berelt.Fűtés_kategória > 5) & (df_masolat_labeltop5_berelt.Szobaszám_kategória > 5)]
print(df_masolat_labeltop5_KESZ_eladott)

df_masolat_labeltop5_KESZ_eladott.corr()

corrmat = df_masolat_labeltop5_KESZ_eladott.corr()
  
f, ax = plt.subplots(figsize =(9, 8))
sns.heatmap(corrmat, ax = ax, cmap ="Paired", linewidths = 0.1)

"""# **Korreláció top5-ős one hot encoding-gal**

A Jogi státusz, a Típus és az Altípust nem kell változtatni, alapból 5 vagy kevesebb fajtája van.

**Bérbeadott:**
"""

#a label encoding top5nél már kigyűjtöttem a top5öt mindből
#eldobom azokat az oszlopkat amik nekem nem kellenek, de mivel rentegeg oszlopot kéne felsorolnom, lehet rövidebb ha azt sorolom fel amit megtartok
"""
Település:
Kecskemét
Debrecen
Győr
Miskolc
Pécs
Jogi_státusz:
hasznalt
uj
Típus:
tarsashazi
csaladihaz
hazresz
sorhaz
ikerhaz
Altípus:
tegla
panel
csusztatott_zsalus
egyeb
Emelet:
2
1
3
földszint
0
Fűtés:
gaz_cirko
gaz_konvektor
tavegyedi
tav
hazkozponti
Szobaszám:
2 + 0
1 + 0
3 + 0
1 + 1
2 + 1
"""

df_masolat_onehottop5_berelt_KESZ=df_masolat_onehottop5_berelt[['Körzet', 'Év', 'Nyaraló', 'Panelprogram','Ingatlan_állapota', 'Építés_éve', 'Zárószint', 'Tájolás','Kilátás','Lift', 'Lakáson_belüli_szintszám', 'Nettó_méret','Terasz_méret', 'Erkély_méret', 'Telek_méret', 'Telek_méret_mértékegysége', 'Kiadási_ár', 'Négyzetméterár', 'Település_Kecskemét', 'Település_Debrecen', 'Település_Győr', 'Település_Miskolc', 'Település_Pécs', 'Jogi_státusz_hasznalt', 'Jogi_státusz_uj', 'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_hazresz', 'Típus_sorhaz', 'Típus_ikerhaz', 'Altípus_tegla', 'Altípus_panel', 'Altípus_csusztatott_zsalus', 'Altípus_egyeb', 'Emelet_2', 'Emelet_1', 'Emelet_3', 'Emelet_földszint', 'Emelet_0', 'Fűtés_gaz_cirko', 'Fűtés_gaz_konvektor', 'Fűtés_tavegyedi', 'Fűtés_tav', 'Fűtés_hazkozponti', 'Szobaszám_2 + 0', 'Szobaszám_1 + 0', 'Szobaszám_3 + 0', 'Szobaszám_1 + 1', 'Szobaszám_2 + 1']]

filtered_values = np.where(((df_masolat_onehottop5_berelt_KESZ['Település_Kecskemét']==1) | (df_masolat_onehottop5_berelt_KESZ['Település_Debrecen']==1) | (df_masolat_onehottop5_berelt_KESZ['Település_Győr']==1) | (df_masolat_onehottop5_berelt_KESZ['Település_Miskolc']==1) | (df_masolat_onehottop5_berelt_KESZ['Település_Pécs']==1)) & ((df_masolat_onehottop5_berelt_KESZ['Típus_tarsashazi']==1) | (df_masolat_onehottop5_berelt_KESZ['Típus_csaladihaz']==1) | (df_masolat_onehottop5_berelt_KESZ['Típus_hazresz']==1) | (df_masolat_onehottop5_berelt_KESZ['Típus_sorhaz']==1) | (df_masolat_onehottop5_berelt_KESZ['Típus_ikerhaz']==1)) & ((df_masolat_onehottop5_berelt_KESZ['Emelet_2']==1) | (df_masolat_onehottop5_berelt_KESZ['Emelet_1']==1) | (df_masolat_onehottop5_berelt_KESZ['Emelet_3']==1) | (df_masolat_onehottop5_berelt_KESZ['Emelet_földszint']==1) | (df_masolat_onehottop5_berelt_KESZ['Emelet_0']==1)) & ((df_masolat_onehottop5_berelt_KESZ['Fűtés_gaz_cirko']==1) | (df_masolat_onehottop5_berelt_KESZ['Fűtés_gaz_konvektor']==1) | (df_masolat_onehottop5_berelt_KESZ['Fűtés_tavegyedi']==1) | (df_masolat_onehottop5_berelt_KESZ['Fűtés_tav']==1) | (df_masolat_onehottop5_berelt_KESZ['Fűtés_hazkozponti']==1)) & ((df_masolat_onehottop5_berelt_KESZ['Szobaszám_2 + 0']==1) | (df_masolat_onehottop5_berelt_KESZ['Szobaszám_1 + 0']==1) | (df_masolat_onehottop5_berelt_KESZ['Szobaszám_3 + 0']==1) | (df_masolat_onehottop5_berelt_KESZ['Szobaszám_1 + 1']==1) | (df_masolat_onehottop5_berelt_KESZ['Szobaszám_2 + 1']==1))) 

#print(filtered_values)
display(df_masolat_onehottop5_berelt_KESZ.loc[filtered_values])

df_masolat_onehottop5_berelt_VEGLEGES=df_masolat_onehottop5_berelt_KESZ.loc[filtered_values]

onehot_berelt_corr= df_masolat_onehottop5_berelt_VEGLEGES.corr()
pd.set_option('display.max_columns', None)
onehot_berelt_corr

corrmat = df_masolat_onehottop5_berelt_VEGLEGES.corr()
  
f, ax = plt.subplots(figsize =(12, 11))
sns.heatmap(corrmat, ax = ax, cmap ="Paired", linewidths = 0.1)

"""**Eladott:**

település:
Debrecen            91
Miskolc             59
Pécs                48
Nyíregyháza         40
Tatabánya           34
Jogi_státusz:
hasznalt
uj
Típus:
tarsashazi    375
csaladihaz    102
ikerhaz        11
sorhaz          6
tanya
Altípus:
tegla                 316
panel                 133
csusztatott_zsalus     28
vegyesfalazatu         11
valyog    
emelet:
0                 125
3                  80
2                  67
1                  62
4                  47
fűtés:
gaz_cirko                  138
tavegyedi                  100
gaz_konvektor               97
tav                         69
hazkozponti                 29
szobaszám:
2 + 0     168
3 + 0      71
1 + 0      54
2 + 1      47
1 + 1      45
"""

df_masolat_onehottop5_eladott_KESZ=df_masolat_onehottop5_eladott[['Körzet', 'Év', 'Nyaraló', 'Panelprogram','Ingatlan_állapota', 'Építés_éve', 'Zárószint', 'Tájolás','Kilátás','Lift', 'Lakáson_belüli_szintszám', 'Nettó_méret','Terasz_méret', 'Erkély_méret', 'Telek_méret', 'Telek_méret_mértékegysége', 'Eladási_ár', 'Négyzetméterár', 'Település_Debrecen', 'Település_Miskolc', 'Település_Pécs', 'Település_Nyíregyháza', 'Település_Tatabánya', 'Jogi_státusz_hasznalt', 'Jogi_státusz_uj', 'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_ikerhaz', 'Típus_sorhaz', 'Típus_tanya', 'Altípus_tegla', 'Altípus_panel', 'Altípus_csusztatott_zsalus', 'Altípus_vegyesfalazatu', 'Altípus_valyog', 'Emelet_0', 'Emelet_3', 'Emelet_2', 'Emelet_1', 'Emelet_4', 'Fűtés_gaz_cirko', 'Fűtés_tavegyedi', 'Fűtés_gaz_konvektor', 'Fűtés_tav', 'Fűtés_hazkozponti', 'Szobaszám_2 + 0', 'Szobaszám_3 + 0', 'Szobaszám_1 + 0', 'Szobaszám_2 + 1', 'Szobaszám_1 + 1']]

filtered_values = np.where(((df_masolat_onehottop5_eladott_KESZ['Település_Debrecen']==1) | (df_masolat_onehottop5_eladott_KESZ['Település_Miskolc']==1) | (df_masolat_onehottop5_eladott_KESZ['Település_Pécs']==1) | (df_masolat_onehottop5_eladott_KESZ['Település_Nyíregyháza']==1) | (df_masolat_onehottop5_eladott_KESZ['Település_Tatabánya']==1)) & ((df_masolat_onehottop5_eladott_KESZ['Típus_tarsashazi']==1) | (df_masolat_onehottop5_eladott_KESZ['Típus_csaladihaz']==1) | (df_masolat_onehottop5_eladott_KESZ['Típus_ikerhaz']==1) | (df_masolat_onehottop5_eladott_KESZ['Típus_sorhaz']==1) | (df_masolat_onehottop5_eladott_KESZ['Típus_tanya']==1)) & ((df_masolat_onehottop5_eladott_KESZ['Altípus_tegla']==1) | (df_masolat_onehottop5_eladott_KESZ['Altípus_panel']==1) | (df_masolat_onehottop5_eladott_KESZ['Altípus_csusztatott_zsalus']==1) | (df_masolat_onehottop5_eladott_KESZ['Altípus_vegyesfalazatu']==1) | (df_masolat_onehottop5_eladott_KESZ['Altípus_valyog']==1)) & ((df_masolat_onehottop5_eladott_KESZ['Emelet_0']==1) | (df_masolat_onehottop5_eladott_KESZ['Emelet_3']==1) | (df_masolat_onehottop5_eladott_KESZ['Emelet_2']==1) | (df_masolat_onehottop5_eladott_KESZ['Emelet_1']==1) | (df_masolat_onehottop5_eladott_KESZ['Emelet_4']==1)) & ((df_masolat_onehottop5_eladott_KESZ['Fűtés_gaz_cirko']==1) | (df_masolat_onehottop5_eladott_KESZ['Fűtés_gaz_konvektor']==1) | (df_masolat_onehottop5_eladott_KESZ['Fűtés_tavegyedi']==1) | (df_masolat_onehottop5_eladott_KESZ['Fűtés_tav']==1) | (df_masolat_onehottop5_eladott_KESZ['Fűtés_hazkozponti']==1)) & ((df_masolat_onehottop5_eladott_KESZ['Szobaszám_2 + 0']==1) | (df_masolat_onehottop5_eladott_KESZ['Szobaszám_3 + 0']==1) | (df_masolat_onehottop5_eladott_KESZ['Szobaszám_1 + 0']==1) | (df_masolat_onehottop5_eladott_KESZ['Szobaszám_2 + 1']==1) | (df_masolat_onehottop5_eladott_KESZ['Szobaszám_1 + 1']==1))) 

#print(filtered_values)
display(df_masolat_onehottop5_eladott_KESZ.loc[filtered_values])

df_masolat_onehottop5_eladott_VEGLEGES=df_masolat_onehottop5_eladott_KESZ.loc[filtered_values]

df_masolat_onehottop5_eladott_VEGLEGES.corr()

corrmat = df_masolat_onehottop5_eladott_VEGLEGES.corr()
  
f, ax = plt.subplots(figsize =(12, 11))
sns.heatmap(corrmat, ax = ax, cmap ="Paired", linewidths = 0.1)

"""# **Sklearn sima label encodingra**

Először a sima df_masolat_berelt adatbázis nézem meg
"""

print(df_masolat_berelt.info())

sns.pairplot(df_masolat_berelt)
plt.show()

sns.pairplot(df_masolat_berelt, hue='Nettó_méret')
plt.show()

sns.relplot(data=df_masolat_berelt, x='Ingatlan_állapota', y='Kiadási_ár', hue='Nettó_méret')
plt.show()

"""**Bérbeadott:**"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# X és y új változók létrehozása
X = df_masolat_berelt[['Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória']]
y = df_masolat_berelt['Kiadási_ár']

# szétszedjuük kiértékelő és teszt adatbázisokká
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.9)

# új modelt hozunk létre és a fit() fgvnyt használjuk rá
multi_model = LinearRegression()
multi_model.fit(X_train, y_train)

# Új értékek előrejelzése 
predictions = multi_model.predict(X_test)
r2 = r2_score(y_test, predictions)
rmse = mean_squared_error(y_test, predictions)

print('The r2 is: ', r2)
print('The rmse is: ', rmse)

"""**A modellnek két attribútuma van:**



*   .coef_ amely a modellünk együtthatóinak tömbjét tárolja
*   .intercept_ amely a lineáris modellünk y-metszetét tárolja



"""

# értékük kiiratása
print(multi_model.coef_)
print(multi_model.intercept_)

# hogy saját kezüleg is tudjak tesztelni 
coefficients = multi_model.coef_
intercept = multi_model.intercept_
def calculate_charges_simalabel_berelt(ev, ing_allapot, netto_meret, negyzetmeter, telepules_kat, tipus_kat, futes_kat):
  return (ev * coefficients[0]) + (ing_allapot * coefficients[1]) + (netto_meret * coefficients[2]) + (negyzetmeter * coefficients[3]) + (telepules_kat * coefficients[4]) + (tipus_kat * coefficients[5]) + (futes_kat * coefficients[6]) + intercept

# teszt random saját adattal
print(calculate_charges_simalabel_berelt(2020, 5, 150, 2000, 1, 4, 4))

"""**Eladott:**"""

# X és y új változók létrehozása
X = df_masolat_eladott[['Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória']]
y = df_masolat_eladott['Eladási_ár']

# szétszedjuük kiértékelő és teszt adatbázisokká
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.9)

# új modelt hozunk létre és a fit() fgvnyt használjuk rá
multi_model = LinearRegression()
multi_model.fit(X_train, y_train)

# Új értékek előrejelzése 
predictions = multi_model.predict(X_test)
r2 = r2_score(y_test, predictions)
rmse = mean_squared_error(y_test, predictions)

print('The r2 is: ', r2)
print('The rmse is: ', rmse)

# hogy saját kezüleg is tudjak tesztelni 
coefficients = multi_model.coef_
intercept = multi_model.intercept_
def calculate_charges_simalabel_berelt(ev, ing_allapot, netto_meret, negyzetmeter, telepules_kat, tipus_kat, futes_kat):
  return (ev * coefficients[0]) + (ing_allapot * coefficients[1]) + (netto_meret * coefficients[2]) + (negyzetmeter * coefficients[3]) + (telepules_kat * coefficients[4]) + (tipus_kat * coefficients[5]) + (futes_kat * coefficients[6]) + intercept

# teszt random saját adattal
print(calculate_charges_simalabel_berelt(2020, 2, 150, 2000, 1, 4, 4))

df_masolat_eladott[['Település', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória']]

"""# **Sklearn label encoding top5-re**

**Bérbeadott:**
"""

#Év, Nyaraló, Panelprogram, Ingatlan_állapota, Építés_éve, Zárószint, Tájolás, Kilátás, Lift,    
#Nettó_méret, Terasz_méret, Erkély_méret, Telek_méret, Szobaszám, Kiadási_ár, Négyzetméterár, Település_kategória, Jogi_státusz_kategória         
#Típus_kategória, Altípus_kategória, Emelet_kategória, Fűtés_kategória, Szobaszám_kategória

# X és y új változók létrehozása
X = df_masolat_labeltop5_KESZ_berelt[['Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória']]
y = df_masolat_labeltop5_KESZ_berelt['Kiadási_ár']

# szétszedjuük kiértékelő és teszt adatbázisokká
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.9)

# új modelt hozunk létre és a fit() fgvnyt használjuk rá
multi_model = LinearRegression()
multi_model.fit(X_train, y_train)

# Új értékek előrejelzése 
predictions = multi_model.predict(X_test)
r2 = r2_score(y_test, predictions)
rmse = mean_squared_error(y_test, predictions)

print('The r2 is: ', r2)
print('The rmse is: ', rmse)

# hogy saját kezüleg is tudjak tesztelni 
#'Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória'
coefficients = multi_model.coef_
intercept = multi_model.intercept_
def calculate_charges_labeltop5_berbeadott(ev, ing_allapot, netto_meret, negyzetmeter, telepules_kat, tipus_kat, futes_kat):
  return (ev * coefficients[0]) + (ing_allapot * coefficients[1]) + (netto_meret * coefficients[2]) + (negyzetmeter * coefficients[3]) + (telepules_kat * coefficients[4]) + (tipus_kat * coefficients[5]) + (futes_kat * coefficients[6]) + intercept

# teszt random saját adattal
print(calculate_charges_labeltop5_berbeadott(2020, 5, 150, 2000, 1, 4, 4))

"""**Eladott:**"""

#Év, Nyaraló, Panelprogram, Ingatlan_állapota, Építés_éve, Zárószint, Tájolás, Kilátás, Lift,    
#Nettó_méret, Terasz_méret, Erkély_méret, Telek_méret, Szobaszám, Eladási_ár, Négyzetméterár, Település_kategória, Jogi_státusz_kategória         
#Típus_kategória, Altípus_kategória, Emelet_kategória, Fűtés_kategória, Szobaszám_kategória

# X és y új változók létrehozása
X = df_masolat_labeltop5_KESZ_eladott[['Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória']]
y = df_masolat_labeltop5_KESZ_eladott['Eladási_ár']

# szétszedjuük kiértékelő és teszt adatbázisokká
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.9)

# új modelt hozunk létre és a fit() fgvnyt használjuk rá
multi_model = LinearRegression()
multi_model.fit(X_train, y_train)

# Új értékek előrejelzése 
predictions = multi_model.predict(X_test)
r2 = r2_score(y_test, predictions)
rmse = mean_squared_error(y_test, predictions)

print('The r2 is: ', r2)
print('The rmse is: ', rmse)

# hogy saját kezüleg is tudjak tesztelni 
#'Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória'
coefficients = multi_model.coef_
intercept = multi_model.intercept_
def calculate_charges_labeltop5_eladott(ev, ing_allapot, netto_meret, negyzetmeter, telepules_kat, tipus_kat, futes_kat):
  return (ev * coefficients[0]) + (ing_allapot * coefficients[1]) + (netto_meret * coefficients[2]) + (negyzetmeter * coefficients[3]) + (telepules_kat * coefficients[4]) + (tipus_kat * coefficients[5]) + (futes_kat * coefficients[6]) + intercept

# teszt random saját adattal
print(calculate_charges_labeltop5_eladott(2020, 2, 150, 2000, 1, 4, 4))

df_masolat_labeltop5_KESZ_eladott[['Település', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória']]

"""# **Sklearn one hot encoding top5-re**

**Bérbeadott:**
"""

# 'Körzet', 'Év', 'Nyaraló', 'Panelprogram','Ingatlan_állapota', 'Építés_éve', 'Zárószint', 'Tájolás','Kilátás','Lift', 'Lakáson_belüli_szintszám', 'Nettó_méret','Terasz_méret',
# 'Erkély_méret', 'Telek_méret', 'Telek_méret_mértékegysége', 'Kiadási_ár', 'Négyzetméterár', 'Település_Kecskemét', 'Település_Debrecen', 'Település_Győr', 'Település_Miskolc',
# 'Település_Pécs', 'Jogi_státusz_hasznalt', 'Jogi_státusz_uj', 'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_hazresz', 'Típus_sorhaz', 'Típus_ikerhaz', 'Altípus_tegla', 
# 'Altípus_panel', 'Altípus_csusztatott_zsalus', 'Altípus_egyeb', 'Emelet_2', 'Emelet_1', 'Emelet_3', 'Emelet_földszint', 'Emelet_0', 'Fűtés_gaz_cirko',
# 'Fűtés_gaz_konvektor', 'Fűtés_tavegyedi', 'Fűtés_tav', 'Fűtés_hazkozponti', 'Szobaszám_2 + 0', 'Szobaszám_1 + 0', 'Szobaszám_3 + 0', 'Szobaszám_1 + 1', 'Szobaszám_2 + 1'

#ezek kellenek
#'Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_kategória','Típus_kategória', 'Fűtés_kategória'
#19 változó

# X és y új változók létrehozása
X = df_masolat_onehottop5_berelt_VEGLEGES[['Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_Kecskemét', 'Település_Debrecen', 'Település_Győr', 'Település_Miskolc', 'Település_Pécs', 'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_hazresz', 'Típus_sorhaz', 'Típus_ikerhaz', 'Fűtés_gaz_cirko', 'Fűtés_gaz_konvektor', 'Fűtés_tavegyedi', 'Fűtés_tav', 'Fűtés_hazkozponti']]
y = df_masolat_onehottop5_berelt_VEGLEGES['Kiadási_ár']

# szétszedjuük kiértékelő és teszt adatbázisokká
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.9)

# új modelt hozunk létre és a fit() fgvnyt használjuk rá
multi_model = LinearRegression()
multi_model.fit(X_train, y_train)

# Új értékek előrejelzése 
predictions = multi_model.predict(X_test)
r2 = r2_score(y_test, predictions)
rmse = mean_squared_error(y_test, predictions)

print('The r2 is: ', r2)
print('The rmse is: ', rmse)

# hogy saját kezüleg is tudjak tesztelni 19 adat
#'Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_Kecskemét', 'Település_Debrecen', 'Település_Győr', 'Település_Miskolc', 'Település_Pécs', 
#'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_hazresz', 'Típus_sorhaz', 'Típus_ikerhaz', 'Fűtés_gaz_cirko', 'Fűtés_gaz_konvektor', 'Fűtés_tavegyedi', 'Fűtés_tav',
# 'Fűtés_hazkozponti'
coefficients = multi_model.coef_
intercept = multi_model.intercept_
def calculate_charges_onehottop5_kiadott(ev, ing_allapot, netto_meret, negyzetmeter, telepules_kecs, telepules_deb, telepules_gyor, telepules_mis, telepules_pecs, tipus_tarsashazi, tipus_csaladihaz, tipus_hazresz, tipus_sorhaz, tipus_ikerhaz, futes_gaz_cirko, futes_gaz_konvektor, futes_tavegyedi, futes_tav, futes_hazkozponti):
  return (ev * coefficients[0]) + (ing_allapot * coefficients[1]) + (netto_meret * coefficients[2]) + (negyzetmeter * coefficients[3]) + (telepules_kecs * coefficients[4]) + (telepules_deb * coefficients[5]) + (telepules_gyor * coefficients[6]) + (telepules_mis * coefficients[7]) + (telepules_pecs * coefficients[8]) + (tipus_tarsashazi * coefficients[9]) + (tipus_csaladihaz * coefficients[10]) + (tipus_hazresz * coefficients[11]) + (tipus_sorhaz * coefficients[12]) + (tipus_ikerhaz * coefficients[13]) + (futes_gaz_cirko * coefficients[14]) + (futes_gaz_konvektor * coefficients[15]) + (futes_tavegyedi * coefficients[16]) + (futes_tav * coefficients[17]) + (futes_hazkozponti * coefficients[18]) + intercept

# teszt random saját adattal
print(calculate_charges_onehottop5_kiadott(2020, 5, 150, 2000, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0))

"""**Eladott:**"""

#19 változó
#'Körzet', 'Év', 'Nyaraló', 'Panelprogram','Ingatlan_állapota', 'Építés_éve', 'Zárószint', 'Tájolás','Kilátás','Lift', 'Lakáson_belüli_szintszám', 'Nettó_méret','Terasz_méret', 
#'Erkély_méret', 'Telek_méret', 'Telek_méret_mértékegysége', 'Eladási_ár', 'Négyzetméterár', 'Település_Debrecen', 'Település_Miskolc', 'Település_Pécs', 'Település_Nyíregyháza', 
#'Település_Tatabánya', 'Jogi_státusz_hasznalt', 'Jogi_státusz_uj', 'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_ikerhaz', 'Típus_sorhaz', 'Típus_tanya', 'Altípus_tegla', 
#'Altípus_panel', 'Altípus_csusztatott_zsalus', 'Altípus_vegyesfalazatu', 'Altípus_valyog', 'Emelet_0', 'Emelet_3', 'Emelet_2', 'Emelet_1', 'Emelet_4', 'Fűtés_gaz_cirko', 
#'Fűtés_tavegyedi', 'Fűtés_gaz_konvektor', 'Fűtés_tav', 'Fűtés_hazkozponti', 'Szobaszám_2 + 0', 'Szobaszám_3 + 0', 'Szobaszám_1 + 0', 'Szobaszám_2 + 1', 'Szobaszám_1 + 1'

# X és y új változók létrehozása
X = df_masolat_onehottop5_eladott_KESZ[['Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_Debrecen', 'Település_Miskolc', 'Település_Pécs', 'Település_Nyíregyháza', 'Település_Tatabánya', 'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_ikerhaz', 'Típus_sorhaz', 'Típus_tanya',  'Fűtés_gaz_cirko', 'Fűtés_tavegyedi', 'Fűtés_gaz_konvektor', 'Fűtés_tav', 'Fűtés_hazkozponti']]
y = df_masolat_onehottop5_eladott_KESZ['Eladási_ár']

# szétszedjuük kiértékelő és teszt adatbázisokká
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.9)

# új modelt hozunk létre és a fit() fgvnyt használjuk rá
multi_model = LinearRegression()
multi_model.fit(X_train, y_train)

# Új értékek előrejelzése 
predictions = multi_model.predict(X_test)
r2 = r2_score(y_test, predictions)
rmse = mean_squared_error(y_test, predictions)

print('The r2 is: ', r2)
print('The rmse is: ', rmse)

#'Év', 'Ingatlan_állapota', 'Nettó_méret', 'Négyzetméterár', 'Település_Debrecen', 'Település_Miskolc', 'Település_Pécs', 'Település_Nyíregyháza', 'Település_Tatabánya', 
#'Típus_tarsashazi', 'Típus_csaladihaz', 'Típus_ikerhaz', 'Típus_sorhaz', 'Típus_tanya',  'Fűtés_gaz_cirko', 'Fűtés_tavegyedi', 'Fűtés_gaz_konvektor', 'Fűtés_tav', 
#'Fűtés_hazkozponti'


coefficients = multi_model.coef_
intercept = multi_model.intercept_
def calculate_charges_onehottop5_eladott(ev, ing_allapot, netto_meret, negyzetmeter, telepules_deb, telepules_mis, telepules_pecs, telepules_nyir, telepules_tat, tipus_tarsashazi, tipus_csaladihaz, tipus_iker, tipus_sorhaz, tipus_tanya, futes_gaz_cirko, futes_tavegyedi, futes_gaz_konvektor, futes_tav, futes_hazkozponti):
  return (ev * coefficients[0]) + (ing_allapot * coefficients[1]) + (netto_meret * coefficients[2]) + (negyzetmeter * coefficients[3]) + (telepules_deb * coefficients[4]) + (telepules_mis * coefficients[5]) + (telepules_pecs * coefficients[6]) + (telepules_nyir * coefficients[7]) + (telepules_tat * coefficients[8]) + (tipus_tarsashazi * coefficients[9]) + (tipus_csaladihaz * coefficients[10]) + (tipus_iker * coefficients[11]) + (tipus_sorhaz * coefficients[12]) + (tipus_tanya * coefficients[13]) + (futes_gaz_cirko * coefficients[14]) + (futes_tavegyedi * coefficients[15]) + (futes_gaz_konvektor * coefficients[16]) + (futes_tav * coefficients[17]) + (futes_hazkozponti * coefficients[18]) + intercept

# teszt random saját adattal
print(calculate_charges_onehottop5_eladott(2020, 2, 150, 2000, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0))

df_masolat_labeltop5_KESZ_berelt[(df_masolat_labeltop5_KESZ_berelt.Település_kategória == 4)] #Debrecen telep kat->1
df_masolat_labeltop5_KESZ_berelt[(df_masolat_labeltop5_KESZ_berelt.Típus_kategória == 4)] #tarsashazi
df=df_masolat_labeltop5_KESZ_berelt[(df_masolat_labeltop5_KESZ_berelt.Fűtés_kategória == 4)] #gaz_cirko
df_masolat_labeltop5_KESZ_eladott[(df_masolat_labeltop5_KESZ_eladott.Település == "Debrecen")] #Debrecen

"""# **Döntési fa próba**

# **Sima label encoding**

**Bérelt:**
"""

from sklearn import tree
dt = tree.DecisionTreeClassifier() 

df_dontesi_fa_proba = df_masolat_berelt.copy()
classlabel_proba = df_dontesi_fa_proba.Kiadási_ár

df_dontesi_fa_proba.pop('Település')
df_dontesi_fa_proba.pop('Körzet')
df_dontesi_fa_proba.pop('Jogi_státusz')
df_dontesi_fa_proba.pop('Típus')
df_dontesi_fa_proba.pop('Altípus')
df_dontesi_fa_proba.pop('Zárószint')
df_dontesi_fa_proba.pop('Emelet')
df_dontesi_fa_proba.pop('Tájolás')
df_dontesi_fa_proba.pop('Kilátás')
df_dontesi_fa_proba.pop('Fűtés')
df_dontesi_fa_proba.pop('Telek_méret_mértékegysége')
df_dontesi_fa_proba.pop('Szobaszám')

dt.fit(df_dontesi_fa_proba, classlabel_proba)

import pydot
import graphviz
graphviz.Source(tree.export_graphviz(dt, out_file=None))

# döntési fa meta-paramétereinek változtatása:
dt = tree.DecisionTreeClassifier(min_samples_leaf=20, max_depth=6)
dt.fit(df_dontesi_fa_proba, classlabel_proba)
graphviz.Source(tree.export_graphviz(dt, out_file=None, feature_names=df_dontesi_fa_proba.columns))

#Predikció korábban nem látott példákra
dt.fit(df_dontesi_fa_proba[:150], classlabel_proba[:150]) # első 150 sor (rajtuk tanulunk)
prediction = dt.predict(df_dontesi_fa_proba[150:]) # 150 utáni példák (rajtuk teszteljük a megtanult modellt)
prediction

from sklearn.metrics import accuracy_score
accuracy_score(prediction, classlabel_proba[150:])

for md in range(1,20): # a fa mélyésgét (paraméter) változtatjuk
  dt = tree.DecisionTreeClassifier(min_samples_leaf=10, max_depth=md)
  dt.fit(df_dontesi_fa_proba[:100], classlabel_proba[:100])
  print(accuracy_score(dt.predict(df_dontesi_fa_proba[100:]), classlabel_proba[100:]))

"""# **Top5 label encodinggal**
**Bérelt**


"""

from sklearn import tree
dt = tree.DecisionTreeClassifier() 

df_dontesi_fa_labeltop5_berelt = df_masolat_labeltop5_KESZ_berelt.copy()
classlabel = df_dontesi_fa_labeltop5_berelt.Kiadási_ár

print(df_masolat_labeltop5_KESZ_berelt.info())

df_dontesi_fa_labeltop5_berelt.pop('Település')
df_dontesi_fa_labeltop5_berelt.pop('Körzet')
df_dontesi_fa_labeltop5_berelt.pop('Jogi_státusz')
df_dontesi_fa_labeltop5_berelt.pop('Típus')
df_dontesi_fa_labeltop5_berelt.pop('Altípus')
df_dontesi_fa_labeltop5_berelt.pop('Zárószint')
df_dontesi_fa_labeltop5_berelt.pop('Emelet')
df_dontesi_fa_labeltop5_berelt.pop('Tájolás')
df_dontesi_fa_labeltop5_berelt.pop('Kilátás')
df_dontesi_fa_labeltop5_berelt.pop('Fűtés')
df_dontesi_fa_labeltop5_berelt.pop('Telek_méret_mértékegysége')
df_dontesi_fa_labeltop5_berelt.pop('Szobaszám')

dt.fit(df_dontesi_fa_labeltop5_berelt, classlabel)

# döntési fa meta-paramétereinek változtatása:
dt = tree.DecisionTreeClassifier(min_samples_leaf=6, max_depth=4)
dt.fit(df_dontesi_fa_labeltop5_berelt, classlabel)
graphviz.Source(tree.export_graphviz(dt, out_file=None, feature_names=df_dontesi_fa_labeltop5_berelt.columns))

#Predikció korábban nem látott példákra
dt.fit(df_dontesi_fa_labeltop5_berelt[:35], classlabel[:35]) # első 500 sor (rajtuk tanulunk)
prediction = dt.predict(df_dontesi_fa_labeltop5_berelt[35:]) # 500 utáni példák (rajtuk teszteljük a megtanult modellt)
prediction

from sklearn.metrics import accuracy_score
accuracy_score(prediction, classlabel[35:])

for md in range(1,8): # a fa mélyésgét (paraméter) változtatjuk
  dt = tree.DecisionTreeClassifier(min_samples_leaf=4, max_depth=md)
  dt.fit(df_dontesi_fa_labeltop5_berelt[:35], classlabel[:35])
  print(accuracy_score(dt.predict(df_dontesi_fa_labeltop5_berelt[35:]), classlabel[35:]))